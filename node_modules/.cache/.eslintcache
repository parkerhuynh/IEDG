[{"/home/parker/IEDG/src/index.js":"1","/home/parker/IEDG/src/reportWebVitals.js":"2","/home/parker/IEDG/src/App.js":"3"},{"size":500,"mtime":1639449560036,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1639449560036,"results":"6","hashOfConfig":"5"},{"size":2262,"mtime":1639467833698,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1ctl1h2",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/home/parker/IEDG/src/index.js",[],["16","17"],"/home/parker/IEDG/src/reportWebVitals.js",[],"/home/parker/IEDG/src/App.js",["18"],"import './App.css';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { Container, Row, Form, Col } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\n\n\nfunction App() {\n  const {\n    transcript,\n    finalTranscript,\n    resetTranscript,\n  } = useSpeechRecognition()\n  const [text, setText] = useState(\"\")\n  const [cdql, setcdql] = useState(\"\")\n  const [results, setResults] = useState(\"\")\n\n  useEffect(() => {\n    SpeechRecognition.startListening({continuous: true})\n  }, [])\n\n  useEffect(() => {\n    if (transcript.includes(\"reset\")) {\n      resetTranscript()\n    } else {\n      setText(transcript)\n    }\n  }, [transcript, finalTranscript, resetTranscript])\n\n  useEffect(() => {\n    axios.post('/convert_text_to_cdql', {\"text\": finalTranscript}).then(res => {\n      setcdql(res[\"data\"][\"cdql\"])\n    });\n  }, [finalTranscript])\n\n  useEffect(() => {\n    axios.post('/convert_cdql_to_results', {\"cdql\": cdql}).then(res => {\n      setResults(res[\"data\"][\"results\"])\n    });\n  }, [cdql])\n\n  return (\n    <Container>\n      <div>\n        <img  src={'banner.png'} />\n      </div>\n      <div style={{ height: '100px' }}>\n      </div>\n      <Row style = {{ border: \"1px solid black\"}}>\n        <Col xs=\"2\">\n          <Form>\n            <Form.Label style={{ height: '100px' }}>Transcript</Form.Label>\n          </Form>\n        </Col>\n        <Col>\n          <Form>\n            <Form.Label>{text}</Form.Label>\n          </Form>\n        </Col>\n      </Row>\n      <Row style = {{ border: \"1px solid black\"}}>\n      <Col xs=\"2\">\n          <Form>\n            <Form.Label style={{ height: '100px' }}>CDQL query</Form.Label>\n          </Form>\n        </Col>\n        <Col>\n          <Form>\n            <Form.Label>{cdql}</Form.Label>\n          </Form>\n        </Col>\n      </Row>\n      <Row style = {{ border: \"1px solid black\"}}>\n      <Col xs=\"2\">\n          <Form>\n            <Form.Label style={{ height: '100px' }}>Results</Form.Label>\n          </Form>\n        </Col>\n        <Col>\n          <Form>\n            <Form.Label>{results}</Form.Label>\n          </Form>\n        </Col>\n      </Row>\n      \n    </Container>\n  );\n}\n\nexport default App;",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":46,"column":9,"nodeType":"25","endLine":46,"endColumn":36},"no-native-reassign",["26"],"no-negated-in-lhs",["27"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]